--# simple let : exprScore 5
let x = 5 in x

--# nested let : exprScore 16
let x = 5 in let y = 6 in __add__ x (let z = __add__ x y in z)

--# branch recursive let : score
fib :: Int -> Int;
fib n = let done = __le__ n 1 in if done then 1 else let r1 = fib (__add__ n -1) in let r2 = fib (__add__ n -2) in __add__ r1 r2;
--! 89
fib 10



