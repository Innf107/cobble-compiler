--# Polymorphic declaration : score
id :: a -> a;
id x = x;

--! 1
1

--# function application : score
id :: a -> a;
id x = x;

check :: Int -> Int;
check x = x;

--! 5
check (id 5)

--# narrowed function application : error
id :: a -> a;
id x = x;

check :: Bool -> Bool;
check x = x;

--! TypeError : Could not match Int with Bool
check (id 5)

--# Multiple arguments : score
const :: a -> b -> a;
const x y = x;

check :: Int -> Int;
check x = x;

--! 71
check (const 71 (__true__ ()))

--# function types : score
apply :: (a -> b) -> a -> b;
apply f x = f x;

f :: Bool -> Int;
f x = if x then 1 else 0;

--! 1
apply f (__true__ ())

--# id(function) : score
id :: a -> a;
id x = x;

f :: Int -> Int;
f x = x;

g :: Int -> Int;
g = id f;

--! 25
g 25

--! 43
id id 43

--! 67
let id2 = id id in id2 67

--! 34
(if __true__ () then id else g) 34

--# doubleIdentity : score
id :: a -> a;
id x = x;

id2 :: b -> b;
id2 x = x;

id3 :: a -> a;
id3 x = x;

--! 25
id id2 25

--! 25
id id3 25


--# mismatched types : error
f :: Bool -> Bool;
f x = x;

--! TypeError : Could not match type Bool with Int
f (__true__ ())

--# polymorphic if : score
f :: Bool -> a -> a -> a;
f x y z = if x then y else z;

--! 3
f (__true__ ()) 3 4

--# invalid polymorphic if : error
--! TypeError : Could not match type Bool with Int
if __true__ () then 1 else __false__ ()


--# polymorphic struct : score
struct S a {
    x :: a
};

--! 1
1

--# polymorphic struct construction : score
struct S a {
    x :: a
};

s1 :: S Int;
s1 = S {
    x = 5
};

--! 1
1

--! 2
let s = S{x=5} in 2

--# polymorphic struct access : score
struct S a {
    x :: a
};

s :: S Int;
s = S {
    x = 5
};

--! 5
s.x

--# occurs check : error

f :: Int;
f x = x;

--! TypeError: Occurs Check
1