module Data.Ord;

import Data.Bool;

variant Ordering = LT | EQ | GT;

-- TODO: class Eq a => Ord a
class Ord a {
    compare :: a -> a -> Ordering;
};

infixl 4
(<=) ::Ord a => a -> a -> Bool;
(<=) x y = case compare x y of {
    (LT | EQ) -> True;
    _ -> False;
};

infixl 4
(<) :: Ord a => a -> a -> Bool;
(<) x y = case compare x y of {
    LT -> True;
    _ -> False;
};

(>) :: Ord a => a -> a -> Bool;
(>) x y = case compare x y of {
    GT -> True;
    _ -> False;
};

leBy :: (a -> a -> Ordering) -> a -> a -> Bool;
leBy comp x y = case comp x y of {
    LT -> True;
    EQ -> True;
    GT -> False;
};

geBy :: (a -> a -> Ordering) -> a -> a -> Bool;
geBy comp x y = case comp x y of {
    LT -> False;
    EQ -> True;
    GT -> True;
};


instance Ord Int {
    compare x y = if le# x y then LT 
                  else if eq# x y then EQ 
                  else GT;
};
